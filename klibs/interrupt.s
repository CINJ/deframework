/*
Interrupt Lib mostly by Volage/Defame
Other bits and pieces by Zig/Defame 
2012-2018
*/

.macro setupInterrupt(irq, scanline) {
	sei        //disable maskable IRQs

	lda #$7f
	sta $dc0d  //disable timer interrupts which can be generated by the two CIA chips
	sta $dd0d  //the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

	lda $dc0d  //by reading this two registers we negate any pending CIA irqs.
	lda $dd0d  //if we don't do this, a pending CIA irq might occur after we finish setting up our irq. We don't want that to happen.

	lda #$01   //this is how to tell the VICII to generate a raster interrupt
	sta $d01a

	lda #<scanline   //this is how to tell at which rasterline we want the irq to be triggered
	sta $d012

	lda #>scanline   //as there are more than 256 rasterlines, the topmost bit of $d011 serves as
	beq clear
set:
	lda $d011
	ora #$80
	sta $d011
	jmp cont
clear:
	lda $d011
	and #$7f
	sta $d011
	
cont:
	lda #$35   //we turn off the BASIC and KERNAL rom here
	sta $01    //the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

	lda #<irq  //this is how we set up
	sta $fffe  //the address of our interrupt code
	lda #>irq
	sta $ffff

	cli        //enable maskable interrupts again
}

.macro startInterrupt() {
	pha
	txa
	pha
	tya
	pha

	lda #$ff   //this is the orthodox and safe way of clearing the interrupt condition of the VICII.
	sta $d019
}

.macro doubleIRQ(rasterline) {
	// rasterline is the y pos of the raster of the 1st of 2 double irq lines
////////////////////// Stabalize me baby
	:mov #<!irq2+: $fffe
	inc $d012
	
	tsx
	cli
	//these nops never really finish due to the raster IRQ triggering again
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
//---------------------------------------------------------------------------------------------------------------------
!irq2:
	txs
	ldx #$08
	dex
	bne *-1
	bit $ea
	nop

	lda #rasterline+1
	cmp $d012
	beq !cont+
!cont:	//////////////////////	the raster is now stable! \o/
}

.macro endInterrupt(rasterline) {
	:mov #<irq: $fffe
	:mov #rasterline:$d012
	:mov #$ff: $d019
	pla
	tay        //restore register Y from stack (remember stack is FIFO: First In First Out)
	pla
	tax        //restore register X from stack
	pla        //restore register A from stack
	rti
}

.macro kill_nmi(){
    lda #<nmi 
sta $fffa
    lda #>nmi 
sta $fffb
    jmp !+
    nmi:
    rti
!:
}

